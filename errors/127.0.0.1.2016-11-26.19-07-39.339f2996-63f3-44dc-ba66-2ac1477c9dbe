(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> string index out of range"
p3
sS'layer'
p4
S'/home/allie/Documents/F16/CS183/web2py/applications/SlugDash/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# Sample shopping cart implementation.\n# -------------------------------------------------------------------------\n\nimport traceback\n\ndef index():\n    """\n    I am not doing anything here.  Look elsewhere.\n    """\n    return dict()\n\ndef set_timezone():\n    """Ajax call to set the timezone information for the session."""\n    tz_name = request.vars.name\n    # Validates the name.\n    from pytz import all_timezones_set\n    if tz_name in all_timezones_set:\n        session.user_timezone = tz_name\n        # If the user is logged in, sets also the timezone for the user.\n        # Otherwise, it can happen that a user expires a cookie, then click on edit.\n        # When the user is presented the edit page, the translation is done according to UTC,\n        # but when the user is done editing, due to autodetection, the user is then in\n        # it\'s own time zone, and the dates of an assignment change.\n        # This really happened.\n        if auth.user is not None:\n            db.auth_user[auth.user.id] = dict(user_timezone = tz_name)\n        logger.info("Set timezone to: %r" % tz_name)\n    else:\n        logger.warning("Invalid timezone received: %r" % tz_name)\n\ndef get_products():\n    """Gets the list of products, possibly in response to a query."""\n    t = request.vars.q.strip()\n    if request.vars.q:\n        q = ((db.product.name.contains(t)) |\n             (db.product.description.contains(t)))\n    else:\n        q = db.product.id > 0\n    products = db(q).select(db.product.ALL)\n    # Fixes some fields, to make it easy on the client side.\n    for p in products:\n        p.image_url = URL(\'download\', p.image)\n        p.desired_quantity = min(1, p.quantity)\n        p.cart_quantity = 0\n    return response.json(dict(\n        products=products,\n    ))\n\n\ndef purchase():\n    """Ajax function called when a customer orders and pays for the cart."""\n    if not URL.verify(request, hmac_key=session.hmac_key):\n        raise HTTP(500)\n    # Creates the charge.\n    """ This is not working properly. Purchase does not go through\n    import stripe\n    # Your secret key.\n    stripe.api_key = "sk_test_pZ4tD6Pq0VuUCkSyXJ6Feb2T"\n    token = json.loads(request.vars.transaction_token)\n    amount = float(request.vars.amount)\n    try:\n        charge = stripe.Charge.create(\n            amount=int(amount * 100),\n            currency="usd",\n            source=token[\'id\'],\n            description="Purchase",\n        )\n    except stripe.error.CardError as e:\n        logger.info("The card has been declined.")\n        logger.info("%r" % traceback.format_exc())\n        return "nok"\n    """\n\n    db.customer_order.insert(\n        customer_info=request.vars.customer_info,\n        transaction_token=request.vars.transaction_token,\n        order_total=request.vars.order_total,\n        customer_name=request.vars.customer_name,\n        user_email=request.vars.user_email,\n        #transaction_token=json.dumps(token),\n        cart=request.vars.cart)\n    return "ok"\n\n\n# Normally here we would check that the user is an admin, and do programmatic\n# APIs to add and remove products to the inventory, etc.\n@auth.requires_login()\ndef product_management():\n    q = db.product # This queries for all products.\n    form = SQLFORM.grid(\n        q,\n        editable=True,\n        create=True,\n        user_signature=True,\n        deletable=True,\n        fields=[db.product.product_name, db.product.quantity, db.product.price,\n                db.product.image],\n        details=True,\n    )\n    return dict(form=form)\n\n\n""" Viewing orders\nNeed to work on:\n    + Display what/when they ordered\n    + Display if a payment for that order is successful\n    + Create group authentication to prevent certain users from accessing this page\n    + Maybe work on improving the UI\n"""\n@auth.requires_login()\ndef view_orders():\n    q = db.customer_order # This queries for all products.\n    #db.customer_order.customer_info.represent = lambda v, r: nicefy(v)\n    #db.customer_order.transaction_token.represent = lambda v, r: nicefy(v)\n    #db.customer_order.cart.represent = lambda v, r: nicefy(v)\n\n    orders = db().select(db.customer_order.ALL)\n    #db().select(db.customer_order.order_total)\n    for order in orders:\n        order.customer_info = json.loads(order.customer_info)\n        print(order.customer_info)\n        print(order.cart)\n\n    form = SQLFORM.grid(\n        q,\n        editable=True,\n        create=True,\n        user_signature=True,\n        deletable=True,\n        details=True,\n    )\n    return dict(form=form, orders=orders)\n\n\ndef user():\n\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/allie/Documents/F16/CS183/web2py/applications/SlugDash/controllers/default.py", line 177, in <module>\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/allie/Documents/F16/CS183/web2py/applications/SlugDash/controllers/default.py", line 156, in user\n    return dict(form=auth())\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/tools.py", line 1941, in __call__\n    return getattr(self, args[0])()\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/tools.py", line 3329, in register\n    extra_fields=extra_fields\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/sqlhtml.py", line 1295, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/sqlhtml.py", line 313, in widget\n    options = requires[0].options()\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/validators.py", line 453, in options\n    items = [(k, self.labels[i]) for (i, k) in enumerate(self.theset)]\nIndexError: string index out of range\n'
p11
s.