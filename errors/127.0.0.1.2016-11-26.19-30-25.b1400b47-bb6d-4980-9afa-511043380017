(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: auth_user"
p3
sS'layer'
p4
S'/home/allie/Documents/F16/CS183/web2py/applications/SlugDash/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n# app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n\n# once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.get(\'db.uri\'),\n             pool_size=myconf.get(\'db.pool_size\'),\n             migrate_enabled=myconf.get(\'db.migrate\'),\n             check_reserved=[\'all\'])\n    # I like to keep the session in the db.\n    session.connect(request, response, db=db)\nelse:\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    # store sessions and tickets there\n    session.connect(request, response, db=db)\n    #\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n\n# choose a style for forms\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# Adds a timezone field to the auth table.\n"""\nfrom pytz.gae import pytz\nfrom plugin_timezone import tz_nice_detector_widget\nmy_tz_nice_detector_widget = lambda field, value : tz_nice_detector_widget(field, value, autodetect=True)\nauth.settings.extra_fields[\'auth_user\']= [\n  Field(\'user_timezone\', \'string\', widget=my_tz_nice_detector_widget),\n]\n"""\ndb.define_table(\n    \'db\',\n    auth.settings.table_user_name,\n    Field(\'first_name\', length=128, default=\'\'),\n    Field(\'last_name\', length=128, default=\'\'),\n    Field(\'email\', length=128, default=\'\', unique=True, requires=\'@ucsc.edu\'),\n    Field(\'password\',\'password\', length=512, readable=False, label=\'Password\'),\n    Field(\'address\',label=\'Delivery Location\', length=512, requires=IS_IN_SET([\'College Nine Circle\',\n                                        \'College Eight Circle\',\'Kresge College\',\'West Remote\',\n                                                     \'Merrill College\', \'OPERS\'])),\n    Field(\'phone\'),\n    Field(\'role\', label=\'Driver or Diner?\', length=512, requires=IS_IN_SET([\'Driver\',\'Diner\'])),\n    Field(\'registration_key\', length=512, writable=False, readable=False, default=\'\'),\n    Field(\'reset_password_key\', length=512, writable=False, readable = False, default=\'\'),\n    Field(\'registration_id\', length=512, writable=False, readable=False, default=\'\'),\n\n)\n\n#validators\ncustom_auth_table = db[auth.settings.table_user_name]\n\ncustom_auth_table.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\n#custom_auth_table.password.requires = [IS_STRONG(), CRYPT()]  ***fuck this line for the sake of easy test accounts\ncustom_auth_table.email.requires = [ IS_EMAIL(error_message=auth.messages.invalid_email), IS_NOT_IN_DB(db, custom_auth_table.email)]\n# create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n# configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n\n######################\n# Logging\nimport logging, sys\nFORMAT = "%(asctime)s %(levelname)s %(process)s %(thread)s %(funcName)s():%(lineno)d %(message)s"\nlogging.basicConfig(stream=sys.stderr)\nlogger = logging.getLogger(request.application)\nlogger.setLevel(logging.INFO)\n\n# Let\'s log the request.\nlogger.info("====> Request: %r %r %r %r" % (request.env.request_method, request.env.path_info, request.args, request.vars))\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/allie/Documents/F16/CS183/web2py/applications/SlugDash/models/db.py", line 91, in <module>\n    Field(\'registration_id\', length=512, writable=False, readable=False, default=\'\'),\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/packages/dal/pydal/base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/allie/Documents/F16/CS183/web2py/gluon/packages/dal/pydal/objects.py", line 299, in __init__\n    field\nSyntaxError: define_table argument is not a Field or Table: auth_user\n'
p11
s.